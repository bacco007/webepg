'use client';

import React from 'react';
import { ChevronDown } from 'lucide-react';
import Link from 'next/link';

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

const creditSections = [
  {
    title: 'Development Team',
    items: [
      { name: 'Jane Doe', role: 'Lead Developer', github: 'janedoe' },
      { name: 'John Smith', role: 'UI/UX Designer', github: 'johnsmith' },
      { name: 'Alice Johnson', role: 'Backend Developer', github: 'alicejohnson' },
      { name: 'Bob Williams', role: 'Frontend Developer', github: 'bobwilliams' },
    ],
  },
  {
    title: 'Open Source Libraries',
    items: [
      { name: 'React', version: '18.2.0', license: 'MIT', url: 'https://reactjs.org/' },
      { name: 'Next.js', version: '13.4.7', license: 'MIT', url: 'https://nextjs.org/' },
      { name: 'Tailwind CSS', version: '3.3.2', license: 'MIT', url: 'https://tailwindcss.com/' },
      { name: 'Lucide Icons', version: '0.252.0', license: 'ISC', url: 'https://lucide.dev/' },
    ],
  },
  {
    title: 'Data Sources',
    items: [
      { name: 'XMLTV', description: 'TV listings data', url: 'http://xmltv.org/' },
      {
        name: 'The Movie Database',
        description: 'Movie and TV show metadata',
        url: 'https://www.themoviedb.org/',
      },
      { name: 'OpenWeatherMap', description: 'Weather data', url: 'https://openweathermap.org/' },
    ],
  },
  {
    title: 'Special Thanks',
    items: [
      {
        name: 'Open Source Community',
        description: 'For their continuous support and contributions',
      },
      { name: 'Beta Testers', description: 'For their valuable feedback and bug reports' },
      { name: 'Family and Friends', description: 'For their patience and encouragement' },
    ],
  },
];

export default function CreditsPage() {
  return (
    <div className="flex max-h-screen max-w-full flex-col">
      <header className="bg-background flex items-center justify-between border-b p-4">
        <h1 className="text-2xl font-bold">Credits</h1>
      </header>
      <main className="w-full grow overflow-auto p-4">
        <Card>
          <CardHeader>
            <CardTitle>Acknowledgements</CardTitle>
            <CardDescription>
              We would like to thank all the individuals and organizations that have contributed to
              this project.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Accordion type="single" collapsible className="w-full">
              {creditSections.map((section, index) => (
                <AccordionItem value={`item-${index}`} key={index}>
                  <AccordionTrigger className="text-lg font-semibold">
                    {section.title}
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                      {section.items.map((item, itemIndex) => (
                        <Card key={itemIndex}>
                          <CardHeader>
                            <CardTitle className="text-base">{item.name}</CardTitle>
                            {item.role && <CardDescription>{item.role}</CardDescription>}
                          </CardHeader>
                          <CardContent>
                            {item.github && (
                              <Link
                                href={`https://github.com/${item.github}`}
                                target="_blank"
                                rel="noopener noreferrer"
                              >
                                <Button variant="outline" size="sm">
                                  GitHub Profile
                                </Button>
                              </Link>
                            )}
                            {item.version && (
                              <div className="mt-2">
                                <Badge variant="secondary">v{item.version}</Badge>
                                <Badge variant="outline" className="ml-2">
                                  {item.license}
                                </Badge>
                              </div>
                            )}
                            {item.description && (
                              <p className="text-muted-foreground mt-2 text-sm">
                                {item.description}
                              </p>
                            )}
                            {item.url && (
                              <Link
                                href={item.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-primary mt-2 block text-sm hover:underline"
                              >
                                Learn More
                              </Link>
                            )}
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
